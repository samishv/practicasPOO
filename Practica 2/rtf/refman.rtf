{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment Practica 2 }Practica 2}
{\comment Generado por doxygen 1.9.5.}
{\creatim \yr2022\mo11\dy2\hr0\min44\sec32}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Practica 2}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Versi\'F3n \par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Mi\'E9rcoles, 2 de Noviembre de 2022 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Tabla de contenidos\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Indice de archivos\par \pard\plain 
{\tc \v Indice de archivos}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de archivos\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Lista de todos los archivos con descripciones breves:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b C:/Users/ikerf/Desktop/Upiita/3er Semestre/POO/practicas-poo/Practica 2/{\b Practica2.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/ikerf/Desktop/Upiita/3er Semestre/POO/practicas-poo/Practica 2/{\b Practica2Doxy.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Documentaci\'F3n de archivos{\tc \v Documentaci\'F3n de archivos}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia del Archivo C:/Users/ikerf/Desktop/Upiita/3er Semestre/POO/practicas-poo/Practica 2/Practica2.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ikerf/Desktop/Upiita/3er Semestre/POO/practicas-poo/Practica 2/Practica2.cpp}
{\xe \v C:/Users/ikerf/Desktop/Upiita/3er Semestre/POO/practicas-poo/Practica 2/Practica2.cpp}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include <chrono>}\par
{\f2 #include <random>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Funciones\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b calculadora} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b menu} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Muestra un menu con las operaciones que puede realizar la calculadora de matrices y solicita escoger una. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b leerMatriz} (int, int, int)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b randomMatriz} (int, int, int, unsigned int)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b imprimirMatriz} (int, int, int)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b sumaMatriz} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite sumar 2 matrices con dimensiones iguales. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b restaMatriz} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite restar 2 matrices con dimensiones iguales. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b multMatriz} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite multiplicar 2 matrices. El n\'FAmero de columnas de la primer matriz debe ser el mismo numero de filas de la segunda. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b transMatriz} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
transMatriz Saca la transpuestade una matriz. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b leerMatriz} (int **M, int fila, int columna)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b randomMatriz} (int **M, int fila, int columna, unsigned int semilla)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b imprimirMatriz} (int **M, int fila, int columna)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descripci\'F3n detallada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Versi\'F3n\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
1.0 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Fecha\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
26/10/2022 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Autor\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Ram\'EDrez L\'F3pez Emilio, S\'E1nchez D\'EDaz Nadya, Vel\'E1zquez Osorio Samara Ishtar \par
}}}{
Definici\'F3n en el archivo {\b Practica2.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de las funciones\par
\pard\plain 
{\xe \v calculadora\:Practica2.cpp}
{\xe \v Practica2.cpp\:calculadora}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void calculadora ()}}
\par
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\b 24} del archivo {\b Practica2.cpp}.}\par
}
{\xe \v imprimirMatriz\:Practica2.cpp}
{\xe \v Practica2.cpp\:imprimirMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void imprimirMatriz (int **  {\i M}, int  {\i fila}, int  {\i columna})}}
\par
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\b 98} del archivo {\b Practica2.cpp}.}\par
}
{\xe \v imprimirMatriz\:Practica2.cpp}
{\xe \v Practica2.cpp\:imprimirMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void imprimirMatriz (int , int , int )}}
\par
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v leerMatriz\:Practica2.cpp}
{\xe \v Practica2.cpp\:leerMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void leerMatriz (int **  {\i M}, int  {\i fila}, int  {\i columna})}}
\par
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\b 75} del archivo {\b Practica2.cpp}.}\par
}
{\xe \v leerMatriz\:Practica2.cpp}
{\xe \v Practica2.cpp\:leerMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void leerMatriz (int , int , int )}}
\par
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v main\:Practica2.cpp}
{\xe \v Practica2.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\b 17} del archivo {\b Practica2.cpp}.}\par
}
{\xe \v menu\:Practica2.cpp}
{\xe \v Practica2.cpp\:menu}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void menu ()}}
\par
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Muestra un menu con las operaciones que puede realizar la calculadora de matrices y solicita escoger una. }}\par
{
Definici\'F3n en la l\'EDnea {\b 59} del archivo {\b Practica2.cpp}.}\par
}
{\xe \v multMatriz\:Practica2.cpp}
{\xe \v Practica2.cpp\:multMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void multMatriz ()}}
\par
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite multiplicar 2 matrices. El n\'FAmero de columnas de la primer matriz debe ser el mismo numero de filas de la segunda. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Ver tambi\'E9n\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b randomMatriz}, {\b leerMatriz}, {\b imprimirMatriz}. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
< int filaA Guarda el n\'FAmero de filas que tendr\'E1 la matriz A\par
< int filaB Guarda el n\'FAmero de filas que tendr\'E1 la matriz B\par
< int columnaA Guarda el n\'FAmero de columnas que tendr\'E1 la matriz A\par
< int columnaB Guarda el n\'FAmero de columnas que tendr\'E1 la matriz B\par
}{
Definici\'F3n en la l\'EDnea {\b 230} del archivo {\b Practica2.cpp}.}\par
}
{\xe \v randomMatriz\:Practica2.cpp}
{\xe \v Practica2.cpp\:randomMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void randomMatriz (int **  {\i M}, int  {\i fila}, int  {\i columna}, unsigned int  {\i semilla})}}
\par
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definici\'F3n en la l\'EDnea {\b 85} del archivo {\b Practica2.cpp}.}\par
}
{\xe \v randomMatriz\:Practica2.cpp}
{\xe \v Practica2.cpp\:randomMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void randomMatriz (int , int , int , unsigned int )}}
\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v restaMatriz\:Practica2.cpp}
{\xe \v Practica2.cpp\:restaMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void restaMatriz ()}}
\par
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite restar 2 matrices con dimensiones iguales. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Ver tambi\'E9n\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b randomMatriz}, {\b leerMatriz}, {\b imprimirMatriz}. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
< int fila Guarda el n\'FAmero de filas que tendr\'E1 la matriz\par
< int columna Guarda el n\'FAmero de columnas que tendr\'E1 la matriz\par
}{
Definici\'F3n en la l\'EDnea {\b 169} del archivo {\b Practica2.cpp}.}\par
}
{\xe \v sumaMatriz\:Practica2.cpp}
{\xe \v Practica2.cpp\:sumaMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void sumaMatriz ()}}
\par
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite sumar 2 matrices con dimensiones iguales. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Ver tambi\'E9n\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b randomMatriz}, {\b leerMatriz}, {\b imprimirMatriz}. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
< int fila Guarda el n\'FAmero de filas que tendr\'E1 la matriz\par
< int columna Guarda el n\'FAmero de columnas que tendr\'E1 la matriz\par
}{
Definici\'F3n en la l\'EDnea {\b 108} del archivo {\b Practica2.cpp}.}\par
}
{\xe \v transMatriz\:Practica2.cpp}
{\xe \v Practica2.cpp\:transMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void transMatriz ()}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
transMatriz Saca la transpuestade una matriz. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Ver tambi\'E9n\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b randomMatriz}, {\b leerMatriz}, {\b imprimirMatriz}. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
< Guarda el n\'FAmero de filas que tendr\'E1 la matriz\par
< Guarda el n\'FAmero de columnas que tendr\'E1 la matriz\par
}{
Definici\'F3n en la l\'EDnea {\b 308} del archivo {\b Practica2.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Practica2.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ikerf/Desktop/Upiita/3er Semestre/POO/practicas-poo/Practica 2/Practica2.cpp}
{\xe \v C:/Users/ikerf/Desktop/Upiita/3er Semestre/POO/practicas-poo/Practica 2/Practica2.cpp}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Ir a la documentaci\'F3n de este archivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include <iostream>}\par
00002 {\cf21 #include <chrono>}\par
00003 {\cf21 #include <random>}\par
00004 \par
00005 {\cf17 using namespace }std;\par
00006 \par
00007 {\cf18 void} calculadora();\par
00008 {\cf18 void} menu();\par
00009 {\cf18 void} leerMatriz({\cf18 int}, {\cf18 int}, {\cf18 int});\par
00010 {\cf18 void} randomMatriz({\cf18 int}, {\cf18 int}, {\cf18 int}, {\cf18 unsigned} {\cf18 int});\par
00011 {\cf18 void} imprimirMatriz({\cf18 int}, {\cf18 int}, {\cf18 int});\par
00012 {\cf18 void} sumaMatriz();\par
00013 {\cf18 void} restaMatriz();\par
00014 {\cf18 void} multMatriz();\par
00015 {\cf18 void} transMatriz();\par
00016 \par
00017 {\cf18 int} main()\{\par
00018 \par
00019     calculadora();\par
00020 \par
00021     {\cf19 return} 0;\par
00022 \}\par
00023 \par
00024 {\cf18 void} calculadora()\{\par
00025     {\cf18 int} opcion\{\};\par
00026 \par
00027     {\cf19 do}\{\par
00028         menu();\par
00029         cin >> opcion;\par
00030         {\cf19 if}(cin.fail() || cin.bad())\{\par
00031             opcion = 0;\par
00032             cin.clear();\par
00033             cin.ignore();\par
00034         \}\par
00035 \par
00036         {\cf19 switch}(opcion)\{\par
00037             {\cf19 case} 1:\par
00038                 sumaMatriz();\par
00039                 {\cf19 break};\par
00040             {\cf19 case} 2:\par
00041                 restaMatriz();\par
00042                 {\cf19 break};\par
00043             {\cf19 case} 3:\par
00044                 multMatriz();\par
00045                 {\cf19 break};\par
00046             {\cf19 case} 4:\par
00047                 transMatriz();\par
00048                 {\cf19 break};\par
00049             {\cf19 case} 5:\par
00050                 cout << {\cf22 "\\n\\nTENGA UN BUEN DIA\\n\\n"};\par
00051                 {\cf19 break};\par
00052             {\cf19 default}:\par
00053                 cout << {\cf22 "\\n\\nOPCION NO VALIDA\\n\\n"};\par
00054                 {\cf19 break};\par
00055         \}\par
00056     \}{\cf19 while}(opcion != 5);\par
00057 \}\par
00058 \par
00059 {\cf18 void} menu()\{\par
00060     cout << {\cf22 "\\n         CALCULADORA DE MATRICES"}\par
00061          << {\cf22 "\\n//////////////////////////////////////////"}\par
00062          << {\cf22 "\\n1. Suma de Matrices............. (Pulsa 1)"}\par
00063          << {\cf22 "\\n2. Resta de Matrices............ (Pulsa 2)"}\par
00064          << {\cf22 "\\n3. Multiplicacion de Matrices... (Pulsa 3)"}\par
00065          << {\cf22 "\\n4. Transpuesta de Matriz........ (Pulsa 4)"}\par
00066          << {\cf22 "\\n5. Finalizar Calculadora........ (Pulsa 5)"}\par
00067          << {\cf22 "\\n//////////////////////////////////////////"}\par
00068          << {\cf22 "\\nNOTA: LA MATRIZ SE GENERARA DE MANERA"}\par
00069          << {\cf22 "\\n      ALEATORIA SI PUEDE CONTENER"}\par
00070          << {\cf22 "\\n      MAS DE 16 ELEMENTOS"}\par
00071          << {\cf22 "\\n      (CON UN RANGO 0-100)"}\par
00072          << {\cf22 "\\n\\nSELECCIONA UNA OPCION (1-5): "};\par
00073 \}\par
00074 \par
00075 {\cf18 void} leerMatriz({\cf18 int} **M, {\cf18 int} fila, {\cf18 int} columna)\{\par
00076     cout << {\cf22 "\\nRellenar la matriz:\\n"};\par
00077     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{\par
00078         {\cf19 for}({\cf18 size_t} j\{0\}; j < columna; j++)\{\par
00079             cout << {\cf22 "Matriz["} << i+1 << {\cf22 "]["} << j+1 << {\cf22 "]: "};\par
00080             cin >> M[i][j];\par
00081         \}\par
00082     \}\par
00083 \}\par
00084 \par
00085 {\cf18 void} randomMatriz({\cf18 int} **M, {\cf18 int} fila, {\cf18 int} columna, {\cf18 unsigned} {\cf18 int} semilla)\{\par
00086     default_random_engine motorG(semilla);\par
00087     uniform_int_distribution<int> distM(0,100);\par
00088 \par
00089     cout << {\cf22 "\\nMatriz:\\n"};\par
00090     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{\par
00091         {\cf19 for}({\cf18 size_t} j\{0\}; j < columna; j++)\{\par
00092             M[i][j] = distM(motorG);\par
00093             cout << {\cf22 "Matriz["} << i+1 << {\cf22 "]["} << j+1 << {\cf22 "]: "} << M[i][j] << endl;\par
00094         \}\par
00095     \}\par
00096 \}\par
00097 \par
00098 {\cf18 void} imprimirMatriz({\cf18 int} **M, {\cf18 int} fila, {\cf18 int} columna)\{\par
00099     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{\par
00100         cout << {\cf22 "|\\t"};\par
00101         {\cf19 for}({\cf18 size_t} j\{0\}; j < columna; j++)\{\par
00102             cout << M[i][j] << {\cf22 "\\t"};\par
00103         \}\par
00104         cout << {\cf22 "\\t|\\n"};\par
00105     \}\par
00106 \}\par
00107 \par
00108 {\cf18 void} sumaMatriz()\{\par
00109     {\cf18 int} fila\{\};\par
00110     {\cf18 int} columna\{\};\par
00111 \par
00112     cout << {\cf22 "\\nLAS MATRICES TENDRAN LAS MISMAS DIMENSIONES\\n"}\par
00113          << {\cf22 "\\nDimensiones de las matrices:"};\par
00114     cout << {\cf22 "\\nFilas de las matrices: "};\par
00115     cin >> fila;\par
00116     cout << {\cf22 "\\nColumnas de las matrices: "};\par
00117     cin >> columna;\par
00118 \par
00119     {\cf18 int} **A = {\cf17 new} {\cf18 int}*[fila];           {\cf20 //doble apuntador para hacer matriz A}\par
00120     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{    {\cf20 //Para cada fila del apuntador se hace}\par
00121         A[i] = {\cf17 new} {\cf18 int}[columna];        {\cf20 //las columnas necesarias}\par
00122     \}\par
00123 \par
00124     {\cf18 int} **B = {\cf17 new} {\cf18 int}*[fila];           {\cf20 //doble apuntador para hacer matriz B}\par
00125     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{\par
00126         B[i] = {\cf17 new} {\cf18 int}[columna];\par
00127     \}\par
00128 \par
00129     {\cf18 int} **C = {\cf17 new} {\cf18 int}*[fila];           {\cf20 //doble apuntador para hacer matriz C}\par
00130     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{\par
00131         C[i] = {\cf17 new} {\cf18 int}[columna];\par
00132     \}\par
00133 \par
00134     {\cf20 //Se inicializan las semillas en tiempos de ejecucion diferentes para evitar primer elemento igual}\par
00135     {\cf18 unsigned} {\cf18 int} semilla1 = chrono::steady_clock::now().time_since_epoch().count();\par
00136 \par
00137     cout << {\cf22 "\\nDatos de la matriz A: "};\par
00138     {\cf19 if}(fila*columna > 16)\{\par
00139         randomMatriz(A, fila, columna, semilla1);\par
00140     \}{\cf19 else}\{\par
00141         leerMatriz(A, fila, columna);\par
00142     \}\par
00143 \par
00144     {\cf18 unsigned} {\cf18 int} semilla2 = chrono::steady_clock::now().time_since_epoch().count();\par
00145 \par
00146     cout << {\cf22 "\\nDatos de la matriz B: "};\par
00147     {\cf19 if}(fila*columna > 16)\{\par
00148         randomMatriz(B, fila, columna, semilla2);\par
00149     \}{\cf19 else}\{\par
00150         leerMatriz(B, fila, columna);\par
00151     \}\par
00152 \par
00153     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{\par
00154         {\cf19 for}({\cf18 size_t} j\{0\}; j < columna; j++)\{\par
00155             C[i][j] = A[i][j] + B[i][j];\par
00156         \}\par
00157     \}\par
00158 \par
00159     cout << {\cf22 "\\nMatriz A:\\n"};\par
00160     imprimirMatriz(A, fila, columna);\par
00161     cout << {\cf22 "\\nMatriz B:\\n"};\par
00162     imprimirMatriz(B, fila, columna);\par
00163     cout << {\cf22 "\\nSuma de las matrices A+B:\\n"};\par
00164     imprimirMatriz(C, fila, columna);\par
00165     system({\cf22 "PAUSE()"});\par
00166     cout << {\cf22 "\\n"} << endl;\par
00167 \}\par
00168 \par
00169 {\cf18 void} restaMatriz()\{\par
00170     {\cf18 int} fila\{\};\par
00171     {\cf18 int} columna\{\};\par
00172 \par
00173     cout << {\cf22 "\\nLAS MATRICES TENDRAN LAS MISMAS DIMENSIONES\\n"}\par
00174          << {\cf22 "\\nDimensiones de las matrices:"};\par
00175     cout << {\cf22 "\\nFilas de las matrices: "};\par
00176     cin >> fila;\par
00177     cout << {\cf22 "\\nColumnas de las matrices: "};\par
00178     cin >> columna;\par
00179 \par
00180     {\cf18 int} **A = {\cf17 new} {\cf18 int}*[fila];           {\cf20 //doble apuntador para hacer matriz A}\par
00181     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{    {\cf20 //Para cada fila del apuntador se hace}\par
00182         A[i] = {\cf17 new} {\cf18 int}[columna];        {\cf20 //las columnas necesarias}\par
00183     \}\par
00184 \par
00185     {\cf18 int} **B = {\cf17 new} {\cf18 int}*[fila];           {\cf20 //doble apuntador para hacer matriz B}\par
00186     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{\par
00187         B[i] = {\cf17 new} {\cf18 int}[columna];\par
00188     \}\par
00189 \par
00190     {\cf18 int} **C = {\cf17 new} {\cf18 int}*[fila];           {\cf20 //doble apuntador para hacer matriz C}\par
00191     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{\par
00192         C[i] = {\cf17 new} {\cf18 int}[columna];\par
00193     \}\par
00194 \par
00195     {\cf20 //Se inicializan las semillas en tiempos de ejecucion diferentes para evitar primer elemento igual}\par
00196     {\cf18 unsigned} {\cf18 int} semilla1 = chrono::steady_clock::now().time_since_epoch().count();\par
00197 \par
00198     cout << {\cf22 "\\nDatos de la matriz A: "};\par
00199     {\cf19 if}(fila*columna > 16)\{\par
00200         randomMatriz(A, fila, columna, semilla1);\par
00201     \}{\cf19 else}\{\par
00202         leerMatriz(A, fila, columna);\par
00203     \}\par
00204 \par
00205     {\cf18 unsigned} {\cf18 int} semilla2 = chrono::steady_clock::now().time_since_epoch().count();\par
00206 \par
00207     cout << {\cf22 "\\nDatos de la matriz B: "};\par
00208     {\cf19 if}(fila*columna > 16)\{\par
00209         randomMatriz(B, fila, columna, semilla2);\par
00210     \}{\cf19 else}\{\par
00211         leerMatriz(B, fila, columna);\par
00212     \}\par
00213 \par
00214     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{\par
00215         {\cf19 for}({\cf18 size_t} j\{0\}; j < columna; j++)\{\par
00216             C[i][j] = A[i][j] - B[i][j];\par
00217         \}\par
00218     \}\par
00219 \par
00220     cout << {\cf22 "\\nMatriz A:\\n"};\par
00221     imprimirMatriz(A, fila, columna);\par
00222     cout << {\cf22 "\\nMatriz B:\\n"};\par
00223     imprimirMatriz(B, fila, columna);\par
00224     cout << {\cf22 "\\nSuma de las matrices A-B:\\n"};\par
00225     imprimirMatriz(C, fila, columna);\par
00226     system({\cf22 "PAUSE()"});\par
00227     cout << {\cf22 "\\n"} << endl;\par
00228 \}\par
00229 \par
00230 {\cf18 void} multMatriz()\{\par
00231     {\cf18 int} filaA\{\};\par
00232     {\cf18 int} filaB\{\};\par
00233     {\cf18 int} columnaA\{\};\par
00234     {\cf18 int} columnaB\{\};\par
00235 \par
00236     cout << {\cf22 "\\nEL NUMERO DE FILAS DE LA MATRIZ B DEBE SER"}\par
00237          << {\cf22 "\\nIGUAL AL NUMERO DE COLUMNAS DE LA MATRIZ A"};\par
00238     cout << {\cf22 "\\nDimension de la matriz A:"};\par
00239     cout << {\cf22 "\\nFilas de la matriz: "};\par
00240     cin >> filaA;\par
00241     cout << {\cf22 "Columnas de la matriz: "};\par
00242     cin >> columnaA;\par
00243 \par
00244     {\cf18 int} **A = {\cf17 new} {\cf18 int}*[filaA];           {\cf20 //doble apuntador para hacer matriz A}\par
00245     {\cf19 for}({\cf18 size_t} i\{0\}; i < filaA; i++)\{    {\cf20 //Para cada fila del apuntador se hace}\par
00246         A[i] = {\cf17 new} {\cf18 int}[columnaA];        {\cf20 //las columnas necesarias}\par
00247     \}\par
00248 \par
00249     {\cf20 //Se inicializan las semillas en tiempos de ejecucion diferentes para evitar primer elemento igual}\par
00250     {\cf18 unsigned} {\cf18 int} semilla1 = chrono::steady_clock::now().time_since_epoch().count();\par
00251 \par
00252     cout << {\cf22 "\\nDatos de la matriz A: "};\par
00253     {\cf19 if}(filaA*columnaA > 16)\{\par
00254         randomMatriz(A, filaA, columnaA, semilla1);\par
00255     \}{\cf19 else}\{\par
00256         leerMatriz(A, filaA, columnaA);\par
00257     \}\par
00258 \par
00259     cout << {\cf22 "\\nDimension de la matriz B:"};\par
00260     cout << {\cf22 "\\nFilas de la matriz: "};\par
00261     cin >> filaB;\par
00262     cout << {\cf22 "Columnas de la matriz: "};\par
00263     cin >> columnaB;\par
00264 \par
00265     {\cf18 int} **B = {\cf17 new} {\cf18 int}*[filaB];           {\cf20 //doble apuntador para hacer matriz B}\par
00266     {\cf19 for}({\cf18 size_t} i\{0\}; i < filaB; i++)\{\par
00267         B[i] = {\cf17 new} {\cf18 int}[columnaB];\par
00268     \}\par
00269 \par
00270     {\cf18 unsigned} {\cf18 int} semilla2 = chrono::steady_clock::now().time_since_epoch().count();\par
00271 \par
00272     cout << {\cf22 "\\nDatos de la matriz B: "};\par
00273     {\cf19 if}(filaB*columnaB > 16)\{\par
00274         randomMatriz(B, filaB, columnaB, semilla2);\par
00275     \}{\cf19 else}\{\par
00276         leerMatriz(B, filaB, columnaB);\par
00277     \}\par
00278 \par
00279     {\cf18 int} **C = {\cf17 new} {\cf18 int}*[filaA];          {\cf20 //doble apuntador para hacer matriz C}\par
00280     {\cf19 for}({\cf18 size_t} i\{0\}; i < filaA; i++)\{   {\cf20 //La matriz C debe tener el numero de filas}\par
00281         C[i] = {\cf17 new} {\cf18 int}[columnaB];       {\cf20 //de la matriz A y las columnas de la matriz B}\par
00282     \}\par
00283 \par
00284     {\cf19 if}(columnaA == filaB)\{\par
00285         {\cf19 for}({\cf18 size_t} i\{0\}; i < filaA; i++)\{\par
00286             {\cf19 for}({\cf18 size_t} j\{0\}; j < columnaB; j++)\{\par
00287                 C[i][j] = 0;\par
00288                 {\cf19 for}({\cf18 size_t} k\{0\}; k < columnaA; k++)\{\par
00289                     C[i][j] += A[i][k] * B[k][j];\par
00290                 \}\par
00291             \}\par
00292         \}\par
00293         cout << {\cf22 "\\nMatriz A:\\n"};\par
00294         imprimirMatriz(A, filaA, columnaA);\par
00295         cout << {\cf22 "\\nMatriz B:\\n"};\par
00296         imprimirMatriz(B, filaB, columnaB);\par
00297         cout << {\cf22 "\\nMultiplicacion de las matrices A*B:\\n"};\par
00298         imprimirMatriz(C, filaA, columnaB);\par
00299     \}{\cf19 else}\{\par
00300         cout << {\cf22 "\\n         NO SE PUEDEN MULTIPLICAR"}\par
00301              << {\cf22 "\\n   EL NUMERO DE COLUMNAS DE LA MATRIZ A NO"}\par
00302              << {\cf22 "\\nCOINCIDE CON EL NUMERO DE FILAS DE LA MATRIZ B"};\par
00303     \}\par
00304     system({\cf22 "PAUSE()"});\par
00305     cout << {\cf22 "\\n"} << endl;\par
00306 \}\par
00307 \par
00308 {\cf18 void} transMatriz()\{\par
00309     {\cf18 int} fila\{\};\par
00310     {\cf18 int} columna\{\};\par
00311 \par
00312     cout << {\cf22 "\\nDimensiones de las matrices:"};\par
00313     cout << {\cf22 "\\nFilas de las matrices: "};\par
00314     cin >> fila;\par
00315     cout << {\cf22 "\\nColumnas de las matrices: "};\par
00316     cin >> columna;\par
00317 \par
00318     {\cf18 int} **A = {\cf17 new} {\cf18 int}*[fila];           {\cf20 //doble apuntador para hacer matriz A}\par
00319     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{    {\cf20 //Para cada fila del apuntador se hace}\par
00320         A[i] = {\cf17 new} {\cf18 int}[columna];        {\cf20 //las columnas necesarias}\par
00321     \}\par
00322 \par
00323     {\cf18 int} **B = {\cf17 new} {\cf18 int}*[columna];           {\cf20 //doble apuntador para hacer matriz B}\par
00324     {\cf19 for}({\cf18 size_t} i\{0\}; i < columna; i++)\{\par
00325         B[i] = {\cf17 new} {\cf18 int}[fila];\par
00326     \}\par
00327 \par
00328     {\cf18 unsigned} {\cf18 int} semilla1 = chrono::steady_clock::now().time_since_epoch().count();\par
00329 \par
00330     cout << {\cf22 "\\nDatos de la matriz A: "};\par
00331     {\cf19 if}(fila*columna > 16)\{\par
00332         randomMatriz(A, fila, columna, semilla1);\par
00333     \}{\cf19 else}\{\par
00334         leerMatriz(A, fila, columna);\par
00335     \}\par
00336 \par
00337     {\cf19 for}({\cf18 size_t} i\{0\}; i < columna; i++)\{\par
00338         {\cf19 for}({\cf18 size_t} j\{0\}; j < fila; j++)\{\par
00339             B[i][j] = A[j][i];\par
00340         \}\par
00341     \}\par
00342 \par
00343     cout << {\cf22 "\\nMatriz:\\n"};\par
00344     imprimirMatriz(A, fila, columna);\par
00345     cout << {\cf22 "\\nTranspuesta:\\n"};\par
00346     imprimirMatriz(B, columna, fila);\par
00347     system({\cf22 "PAUSE()"});\par
00348     cout << {\cf22 "\\n"} << endl;\par
00349 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Referencia del Archivo C:/Users/ikerf/Desktop/Upiita/3er Semestre/POO/practicas-poo/Practica 2/Practica2Doxy.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ikerf/Desktop/Upiita/3er Semestre/POO/practicas-poo/Practica 2/Practica2Doxy.cpp}
{\xe \v C:/Users/ikerf/Desktop/Upiita/3er Semestre/POO/practicas-poo/Practica 2/Practica2Doxy.cpp}
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include <chrono>}\par
{\f2 #include <random>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Funciones\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b menu} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Muestra un menu con las operaciones que puede realizar la calculadora de matrices y solicita escoger una. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b leerMatriz} (int, int, int)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b randomMatriz} (int, int, int, unsigned int)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b imprimirMatriz} (int, int, int)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b sumaMatriz} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite sumar 2 matrices con dimensiones iguales. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b restaMatriz} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite restar 2 matrices con dimensiones iguales. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b multMatriz} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite multiplicar 2 matrices. El n\'FAmero de columnas de la primer matriz debe ser el mismo numero de filas de la segunda. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b transMatriz} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
transMatriz Saca la transpuestade una matriz. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Funci\'F3n principal del programa. Permite elegir que operaci\'F3n realizar. Son 4 opciones, suma, resta, multiplicaci\'F3n, entre 2 matrices, y transpuesta de una matriz; y la opci\'F3n de salir, cualquier otra no se acepta. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b leerMatriz} (int **M, int fila, int columna)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite ingresar los datos de la matriz. El usuario podra ir ingresando los datos de la matiz por filas. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b randomMatriz} (int **M, int fila, int columna, unsigned int semilla)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Genera una matriz con n\'FAmeros aleatorios. Se crear\'E1 una matriz con la cantidad de filas y columnas solicitada con n\'FAmeros aleatorios. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b imprimirMatriz} (int **M, int fila, int columna)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite mostrar en pantalla una matriz ya creada. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documentaci\'F3n de las funciones\par
\pard\plain 
{\xe \v imprimirMatriz\:Practica2Doxy.cpp}
{\xe \v Practica2Doxy.cpp\:imprimirMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void imprimirMatriz (int **  {\i M}, int  {\i fila}, int  {\i columna})}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite mostrar en pantalla una matriz ya creada. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E1metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i **M} \cell }{Doble apuntador que apunta al arreglo de filas reservadas de la matriz a escribir \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fila} \cell }{El numero de filas que tiene la matriz. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i columna} \cell }{El numero de columnas que tiene la matriz. \cell }
{\row }
}
}{
Definici\'F3n en la l\'EDnea {\b 131} del archivo {\b Practica2Doxy.cpp}.}\par
}
{\xe \v imprimirMatriz\:Practica2Doxy.cpp}
{\xe \v Practica2Doxy.cpp\:imprimirMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void imprimirMatriz (int , int , int )}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v leerMatriz\:Practica2Doxy.cpp}
{\xe \v Practica2Doxy.cpp\:leerMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void leerMatriz (int **  {\i M}, int  {\i fila}, int  {\i columna})}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite ingresar los datos de la matriz. El usuario podra ir ingresando los datos de la matiz por filas. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E1metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i **M} \cell }{Doble apuntador que apunta al arreglo de filas reservadas de la matriz a escribir \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fila} \cell }{El numero de filas que va a tener la matriz. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i columna} \cell }{El numero de columnas que va a tener la matriz. \cell }
{\row }
}
}{
Definici\'F3n en la l\'EDnea {\b 94} del archivo {\b Practica2Doxy.cpp}.}\par
}
{\xe \v leerMatriz\:Practica2Doxy.cpp}
{\xe \v Practica2Doxy.cpp\:leerMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void leerMatriz (int , int , int )}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v main\:Practica2Doxy.cpp}
{\xe \v Practica2Doxy.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Funci\'F3n principal del programa. Permite elegir que operaci\'F3n realizar. Son 4 opciones, suma, resta, multiplicaci\'F3n, entre 2 matrices, y transpuesta de una matriz; y la opci\'F3n de salir, cualquier otra no se acepta. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Ver tambi\'E9n\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b sumaMatriz}, {\b restaMatriz}, {\b multMatriz} y {\b transMatriz}. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
int opcion Guarda el n\'FAmero de la opci\'F3n seleccionada\par
}{
Definici\'F3n en la l\'EDnea {\b 29} del archivo {\b Practica2Doxy.cpp}.}\par
}
{\xe \v menu\:Practica2Doxy.cpp}
{\xe \v Practica2Doxy.cpp\:menu}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void menu ()}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Muestra un menu con las operaciones que puede realizar la calculadora de matrices y solicita escoger una. }}\par
{
Definici\'F3n en la l\'EDnea {\b 71} del archivo {\b Practica2Doxy.cpp}.}\par
}
{\xe \v multMatriz\:Practica2Doxy.cpp}
{\xe \v Practica2Doxy.cpp\:multMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void multMatriz ()}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite multiplicar 2 matrices. El n\'FAmero de columnas de la primer matriz debe ser el mismo numero de filas de la segunda. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Ver tambi\'E9n\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b randomMatriz}, {\b leerMatriz}, {\b imprimirMatriz}. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
< int filaA Guarda el n\'FAmero de filas que tendr\'E1 la matriz A\par
< int filaB Guarda el n\'FAmero de filas que tendr\'E1 la matriz B\par
< int columnaA Guarda el n\'FAmero de columnas que tendr\'E1 la matriz A\par
< int columnaB Guarda el n\'FAmero de columnas que tendr\'E1 la matriz B\par
}{
Definici\'F3n en la l\'EDnea {\b 276} del archivo {\b Practica2Doxy.cpp}.}\par
}
{\xe \v randomMatriz\:Practica2Doxy.cpp}
{\xe \v Practica2Doxy.cpp\:randomMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void randomMatriz (int **  {\i M}, int  {\i fila}, int  {\i columna}, unsigned int  {\i semilla})}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Genera una matriz con n\'FAmeros aleatorios. Se crear\'E1 una matriz con la cantidad de filas y columnas solicitada con n\'FAmeros aleatorios. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Par\'E1metros\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i **M} \cell }{Doble apuntador que apunta al arreglo de filas reservadas de la matriz a escribir \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i fila} \cell }{El numero de filas que va a tener la matriz. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i columna} \cell }{El numero de columnas que va a tener la matriz. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i semilla} \cell }{A partir de la cual se generan los numeros aleatorios. \cell }
{\row }
}
}{
Definici\'F3n en la l\'EDnea {\b 112} del archivo {\b Practica2Doxy.cpp}.}\par
}
{\xe \v randomMatriz\:Practica2Doxy.cpp}
{\xe \v Practica2Doxy.cpp\:randomMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void randomMatriz (int , int , int , unsigned int )}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v restaMatriz\:Practica2Doxy.cpp}
{\xe \v Practica2Doxy.cpp\:restaMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void restaMatriz ()}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite restar 2 matrices con dimensiones iguales. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Ver tambi\'E9n\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b randomMatriz}, {\b leerMatriz}, {\b imprimirMatriz}. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
< int fila Guarda el n\'FAmero de filas que tendr\'E1 la matriz\par
< int columna Guarda el n\'FAmero de columnas que tendr\'E1 la matriz\par
}{
Definici\'F3n en la l\'EDnea {\b 210} del archivo {\b Practica2Doxy.cpp}.}\par
}
{\xe \v sumaMatriz\:Practica2Doxy.cpp}
{\xe \v Practica2Doxy.cpp\:sumaMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void sumaMatriz ()}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Permite sumar 2 matrices con dimensiones iguales. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Ver tambi\'E9n\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b randomMatriz}, {\b leerMatriz}, {\b imprimirMatriz}. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
< int fila Guarda el n\'FAmero de filas que tendr\'E1 la matriz\par
< int columna Guarda el n\'FAmero de columnas que tendr\'E1 la matriz\par
}{
Definici\'F3n en la l\'EDnea {\b 145} del archivo {\b Practica2Doxy.cpp}.}\par
}
{\xe \v transMatriz\:Practica2Doxy.cpp}
{\xe \v Practica2Doxy.cpp\:transMatriz}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void transMatriz ()}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
transMatriz Saca la transpuestade una matriz. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Ver tambi\'E9n\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
{\b randomMatriz}, {\b leerMatriz}, {\b imprimirMatriz}. \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
< Guarda el n\'FAmero de filas que tendr\'E1 la matriz\par
< Guarda el n\'FAmero de columnas que tendr\'E1 la matriz\par
}{
Definici\'F3n en la l\'EDnea {\b 358} del archivo {\b Practica2Doxy.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Practica2Doxy.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/ikerf/Desktop/Upiita/3er Semestre/POO/practicas-poo/Practica 2/Practica2Doxy.cpp}
{\xe \v C:/Users/ikerf/Desktop/Upiita/3er Semestre/POO/practicas-poo/Practica 2/Practica2Doxy.cpp}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Ir a la documentaci\'F3n de este archivo.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00008 {\cf21 #include <iostream>}\par
00009 {\cf21 #include <chrono>}\par
00010 {\cf21 #include <random>}\par
00011 \par
00012 {\cf17 using namespace }std;\par
00013 \par
00014 {\cf18 void} menu();\par
00015 {\cf18 void} leerMatriz({\cf18 int}, {\cf18 int}, {\cf18 int});\par
00016 {\cf18 void} randomMatriz({\cf18 int}, {\cf18 int}, {\cf18 int}, {\cf18 unsigned} {\cf18 int});\par
00017 {\cf18 void} imprimirMatriz({\cf18 int}, {\cf18 int}, {\cf18 int});\par
00018 {\cf18 void} sumaMatriz();\par
00019 {\cf18 void} restaMatriz();\par
00020 {\cf18 void} multMatriz();\par
00021 {\cf18 void} transMatriz();\par
00022 \par
00029 {\cf18 int} main()\{\par
00030 \par
00031    {\cf18 int} opcion\{\}; \par
00034     {\cf19 do}\{\par
00035         menu();\par
00036         cin >> opcion;\par
00037         {\cf19 if}(cin.fail() || cin.bad())\{\par
00038             opcion = 0;\par
00039             cin.clear();\par
00040             cin.ignore();\par
00041         \}\par
00042 \par
00043         {\cf19 switch}(opcion)\{\par
00044             {\cf19 case} 1:\par
00045                 sumaMatriz();\par
00046                 {\cf19 break};\par
00047             {\cf19 case} 2:\par
00048                 restaMatriz();\par
00049                 {\cf19 break};\par
00050             {\cf19 case} 3:\par
00051                 multMatriz();\par
00052                 {\cf19 break};\par
00053             {\cf19 case} 4:\par
00054                 transMatriz();\par
00055                 {\cf19 break};\par
00056             {\cf19 case} 5:\par
00057                 cout << {\cf22 "\\n\\nTENGA UN BUEN DIA\\n\\n"};\par
00058                 {\cf19 break};\par
00059             {\cf19 default}:\par
00060                 cout << {\cf22 "\\n\\nOPCION NO VALIDA\\n\\n"};\par
00061                 {\cf19 break};\par
00062         \}\par
00063     \}{\cf19 while}(opcion != 5);\par
00064     {\cf19 return} 0;\par
00065 \}\par
00066 \par
00067 \par
00071 {\cf18 void} menu()\{\par
00072     cout << {\cf22 "\\n         CALCULADORA DE MATRICES"}\par
00073          << {\cf22 "\\n//////////////////////////////////////////"}\par
00074          << {\cf22 "\\n1. Suma de Matrices............. (Pulsa 1)"}\par
00075          << {\cf22 "\\n2. Resta de Matrices............ (Pulsa 2)"}\par
00076          << {\cf22 "\\n3. Multiplicacion de Matrices... (Pulsa 3)"}\par
00077          << {\cf22 "\\n4. Transpuesta de Matriz........ (Pulsa 4)"}\par
00078          << {\cf22 "\\n5. Finalizar Calculadora........ (Pulsa 5)"}\par
00079          << {\cf22 "\\n//////////////////////////////////////////"}\par
00080          << {\cf22 "\\nNOTA: LA MATRIZ SE GENERARA DE MANERA"}\par
00081          << {\cf22 "\\n      ALEATORIA SI PUEDE CONTENER"}\par
00082          << {\cf22 "\\n      MAS DE 16 ELEMENTOS"}\par
00083          << {\cf22 "\\n      (CON UN RANGO 0-100)"}\par
00084          << {\cf22 "\\n\\nSELECCIONA UNA OPCION (1-5): "};\par
00085 \}\par
00086 \par
00094 {\cf18 void} leerMatriz({\cf18 int} **M, {\cf18 int} fila, {\cf18 int} columna)\{\par
00095     cout << {\cf22 "\\nRellenar la matriz:\\n"};\par
00096     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{\par
00097         {\cf19 for}({\cf18 size_t} j\{0\}; j < columna; j++)\{\par
00098             cout << {\cf22 "Matriz["} << i+1 << {\cf22 "]["} << j+1 << {\cf22 "]: "};\par
00099             cin >> M[i][j];\par
00100         \}\par
00101     \}\par
00102 \}\par
00103 \par
00112 {\cf18 void} randomMatriz({\cf18 int} **M, {\cf18 int} fila, {\cf18 int} columna, {\cf18 unsigned} {\cf18 int} semilla)\{\par
00113     default_random_engine motorG(semilla);\par
00114     uniform_int_distribution<int> distM(0,100);\par
00115 \par
00116     cout << {\cf22 "\\nMatriz:\\n"};\par
00117     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{\par
00118         {\cf19 for}({\cf18 size_t} j\{0\}; j < columna; j++)\{\par
00119             M[i][j] = distM(motorG);\par
00120             cout << {\cf22 "Matriz["} << i+1 << {\cf22 "]["} << j+1 << {\cf22 "]: "} << M[i][j] << endl;\par
00121         \}\par
00122     \}\par
00123 \}\par
00124 \par
00131 {\cf18 void} imprimirMatriz({\cf18 int} **M, {\cf18 int} fila, {\cf18 int} columna)\{\par
00132     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{\par
00133         cout << {\cf22 "|\\t"};\par
00134         {\cf19 for}({\cf18 size_t} j\{0\}; j < columna; j++)\{\par
00135             cout << M[i][j] << {\cf22 "\\t"};\par
00136         \}\par
00137         cout << {\cf22 "\\t|\\n"};\par
00138     \}\par
00139 \}\par
00140 \par
00145 {\cf18 void} sumaMatriz()\{\par
00146     {\cf18 int} fila\{\};     \par
00147     {\cf18 int} columna\{\};  \par
00149     cout << {\cf22 "\\nLAS MATRICES TENDRAN LAS MISMAS DIMENSIONES\\n"}\par
00150          << {\cf22 "\\nDimensiones de las matrices:"};\par
00151     cout << {\cf22 "\\nFilas de las matrices: "};\par
00152     cin >> fila;\par
00153     cout << {\cf22 "\\nColumnas de las matrices: "};\par
00154     cin >> columna;\par
00155 \par
00156     {\cf18 int} **A = {\cf17 new} {\cf18 int}*[fila];           {\cf20 //doble apuntador para hacer matriz A}\par
00157     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{    {\cf20 //Para cada fila del apuntador se hace}\par
00158         A[i] = {\cf17 new} {\cf18 int}[columna];        {\cf20 //las columnas necesarias}\par
00159     \}\par
00160 \par
00161     {\cf18 int} **B = {\cf17 new} {\cf18 int}*[fila];           {\cf20 //doble apuntador para hacer matriz B}\par
00162     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{\par
00163         B[i] = {\cf17 new} {\cf18 int}[columna];\par
00164     \}\par
00165 \par
00166     {\cf18 int} **C = {\cf17 new} {\cf18 int}*[fila];           {\cf20 //doble apuntador para hacer matriz C}\par
00167     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{\par
00168         C[i] = {\cf17 new} {\cf18 int}[columna];\par
00169     \}\par
00170 \par
00171     {\cf20 //Se inicializan las semillas en tiempos de ejecucion diferentes para evitar primer elemento igual}\par
00172     {\cf18 unsigned} {\cf18 int} semilla1 = chrono::steady_clock::now().time_since_epoch().count();\par
00173 \par
00174     cout << {\cf22 "\\nDatos de la matriz A: "};\par
00175     {\cf19 if}(fila*columna > 16)\{\par
00176         randomMatriz(A, fila, columna, semilla1);\par
00177     \}{\cf19 else}\{\par
00178         leerMatriz(A, fila, columna);\par
00179     \}\par
00180 \par
00181     {\cf18 unsigned} {\cf18 int} semilla2 = chrono::steady_clock::now().time_since_epoch().count();\par
00182 \par
00183     cout << {\cf22 "\\nDatos de la matriz B: "};\par
00184     {\cf19 if}(fila*columna > 16)\{\par
00185         randomMatriz(B, fila, columna, semilla2);\par
00186     \}{\cf19 else}\{\par
00187         leerMatriz(B, fila, columna);\par
00188     \}\par
00189 \par
00190     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{\par
00191         {\cf19 for}({\cf18 size_t} j\{0\}; j < columna; j++)\{\par
00192             C[i][j] = A[i][j] + B[i][j];\par
00193         \}\par
00194     \}\par
00195 \par
00196     cout << {\cf22 "\\nMatriz A:\\n"};\par
00197     imprimirMatriz(A, fila, columna);\par
00198     cout << {\cf22 "\\nMatriz B:\\n"};\par
00199     imprimirMatriz(B, fila, columna);\par
00200     cout << {\cf22 "\\nSuma de las matrices A+B:\\n"};\par
00201     imprimirMatriz(C, fila, columna);\par
00202     system({\cf22 "PAUSE()"});\par
00203     cout << {\cf22 "\\n"} << endl;\par
00204 \}\par
00205 \par
00210 {\cf18 void} restaMatriz()\{\par
00211     {\cf18 int} fila\{\};     \par
00212     {\cf18 int} columna\{\};  \par
00214     cout << {\cf22 "\\nLAS MATRICES TENDRAN LAS MISMAS DIMENSIONES\\n"}\par
00215          << {\cf22 "\\nDimensiones de las matrices:"};\par
00216     cout << {\cf22 "\\nFilas de las matrices: "};\par
00217     cin >> fila;\par
00218     cout << {\cf22 "\\nColumnas de las matrices: "};\par
00219     cin >> columna;\par
00220 \par
00221     {\cf18 int} **A = {\cf17 new} {\cf18 int}*[fila];           {\cf20 //doble apuntador para hacer matriz A}\par
00222     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{    {\cf20 //Para cada fila del apuntador se hace}\par
00223         A[i] = {\cf17 new} {\cf18 int}[columna];        {\cf20 //las columnas necesarias}\par
00224     \}\par
00225 \par
00226     {\cf18 int} **B = {\cf17 new} {\cf18 int}*[fila];           {\cf20 //doble apuntador para hacer matriz B}\par
00227     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{\par
00228         B[i] = {\cf17 new} {\cf18 int}[columna];\par
00229     \}\par
00230 \par
00231     {\cf18 int} **C = {\cf17 new} {\cf18 int}*[fila];           {\cf20 //doble apuntador para hacer matriz C}\par
00232     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{\par
00233         C[i] = {\cf17 new} {\cf18 int}[columna];\par
00234     \}\par
00235 \par
00236     {\cf20 //Se inicializan las semillas en tiempos de ejecucion diferentes para evitar primer elemento igual}\par
00237     {\cf18 unsigned} {\cf18 int} semilla1 = chrono::steady_clock::now().time_since_epoch().count();\par
00238 \par
00239     cout << {\cf22 "\\nDatos de la matriz A: "};\par
00240     {\cf19 if}(fila*columna > 16)\{\par
00241         randomMatriz(A, fila, columna, semilla1);\par
00242     \}{\cf19 else}\{\par
00243         leerMatriz(A, fila, columna);\par
00244     \}\par
00245 \par
00246     {\cf18 unsigned} {\cf18 int} semilla2 = chrono::steady_clock::now().time_since_epoch().count();\par
00247 \par
00248     cout << {\cf22 "\\nDatos de la matriz B: "};\par
00249     {\cf19 if}(fila*columna > 16)\{\par
00250         randomMatriz(B, fila, columna, semilla2);\par
00251     \}{\cf19 else}\{\par
00252         leerMatriz(B, fila, columna);\par
00253     \}\par
00254 \par
00255     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{\par
00256         {\cf19 for}({\cf18 size_t} j\{0\}; j < columna; j++)\{\par
00257             C[i][j] = A[i][j] - B[i][j];\par
00258         \}\par
00259     \}\par
00260 \par
00261     cout << {\cf22 "\\nMatriz A:\\n"};\par
00262     imprimirMatriz(A, fila, columna);\par
00263     cout << {\cf22 "\\nMatriz B:\\n"};\par
00264     imprimirMatriz(B, fila, columna);\par
00265     cout << {\cf22 "\\nResta de las matrices A-B:\\n"};\par
00266     imprimirMatriz(C, fila, columna);\par
00267     system({\cf22 "PAUSE()"});\par
00268     cout << {\cf22 "\\n"} << endl;\par
00269 \}\par
00270 \par
00276 {\cf18 void} multMatriz()\{\par
00277     {\cf18 int} filaA\{\};        \par
00278     {\cf18 int} filaB\{\};        \par
00279     {\cf18 int} columnaA\{\};     \par
00280     {\cf18 int} columnaB\{\};     \par
00282     cout << {\cf22 "\\nEL NUMERO DE FILAS DE LA MATRIZ B DEBE SER"}\par
00283          << {\cf22 "\\nIGUAL AL NUMERO DE COLUMNAS DE LA MATRIZ A"};\par
00284     cout << {\cf22 "\\nDimension de la matriz A:"};\par
00285     cout << {\cf22 "\\nFilas de la matriz: "};\par
00286     cin >> filaA;\par
00287     cout << {\cf22 "Columnas de la matriz: "};\par
00288     cin >> columnaA;\par
00289 \par
00290     {\cf18 int} **A = {\cf17 new} {\cf18 int}*[filaA];           {\cf20 //doble apuntador para hacer matriz A}\par
00291     {\cf19 for}({\cf18 size_t} i\{0\}; i < filaA; i++)\{    {\cf20 //Para cada fila del apuntador se hace}\par
00292         A[i] = {\cf17 new} {\cf18 int}[columnaA];        {\cf20 //las columnas necesarias}\par
00293     \}\par
00294 \par
00295     {\cf20 //Se inicializan las semillas en tiempos de ejecucion diferentes para evitar primer elemento igual}\par
00296     {\cf18 unsigned} {\cf18 int} semilla1 = chrono::steady_clock::now().time_since_epoch().count();\par
00297 \par
00298     cout << {\cf22 "\\nDatos de la matriz A: "};\par
00299     {\cf19 if}(filaA*columnaA > 16)\{\par
00300         randomMatriz(A, filaA, columnaA, semilla1);\par
00301     \}{\cf19 else}\{\par
00302         leerMatriz(A, filaA, columnaA);\par
00303     \}\par
00304 \par
00305     cout << {\cf22 "\\nDimension de la matriz B:"};\par
00306     cout << {\cf22 "\\nFilas de la matriz: "};\par
00307     cin >> filaB;\par
00308     cout << {\cf22 "Columnas de la matriz: "};\par
00309     cin >> columnaB;\par
00310 \par
00311     {\cf18 int} **B = {\cf17 new} {\cf18 int}*[filaB];           {\cf20 //doble apuntador para hacer matriz B}\par
00312     {\cf19 for}({\cf18 size_t} i\{0\}; i < filaB; i++)\{\par
00313         B[i] = {\cf17 new} {\cf18 int}[columnaB];\par
00314     \}\par
00315 \par
00316     {\cf18 unsigned} {\cf18 int} semilla2 = chrono::steady_clock::now().time_since_epoch().count();\par
00317 \par
00318     cout << {\cf22 "\\nDatos de la matriz B: "};\par
00319     {\cf19 if}(filaB*columnaB > 16)\{\par
00320         randomMatriz(B, filaB, columnaB, semilla2);\par
00321     \}{\cf19 else}\{\par
00322         leerMatriz(B, filaB, columnaB);\par
00323     \}\par
00324 \par
00325     {\cf18 int} **C = {\cf17 new} {\cf18 int}*[filaA];          {\cf20 //doble apuntador para hacer matriz C}\par
00326     {\cf19 for}({\cf18 size_t} i\{0\}; i < filaA; i++)\{   {\cf20 //La matriz C debe tener el numero de filas}\par
00327         C[i] = {\cf17 new} {\cf18 int}[columnaB];       {\cf20 //de la matriz A y las columnas de la matriz B}\par
00328     \}\par
00329 \par
00330     {\cf19 if}(columnaA == filaB)\{\par
00331         {\cf19 for}({\cf18 size_t} i\{0\}; i < filaA; i++)\{\par
00332             {\cf19 for}({\cf18 size_t} j\{0\}; j < columnaB; j++)\{\par
00333                 C[i][j] = 0;\par
00334                 {\cf19 for}({\cf18 size_t} k\{0\}; k < columnaA; k++)\{\par
00335                     C[i][j] += A[i][k] * B[k][j];\par
00336                 \}\par
00337             \}\par
00338         \}\par
00339         cout << {\cf22 "\\nMatriz A:\\n"};\par
00340         imprimirMatriz(A, filaA, columnaA);\par
00341         cout << {\cf22 "\\nMatriz B:\\n"};\par
00342         imprimirMatriz(B, filaB, columnaB);\par
00343         cout << {\cf22 "\\nMultiplicacion de las matrices A*B:\\n"};\par
00344         imprimirMatriz(C, filaA, columnaB);\par
00345     \}{\cf19 else}\{\par
00346         cout << {\cf22 "\\n         NO SE PUEDEN MULTIPLICAR"}\par
00347              << {\cf22 "\\n   EL NUMERO DE COLUMNAS DE LA MATRIZ A NO"}\par
00348              << {\cf22 "\\nCOINCIDE CON EL NUMERO DE FILAS DE LA MATRIZ B"};\par
00349     \}\par
00350     system({\cf22 "PAUSE()"});\par
00351     cout << {\cf22 "\\n"} << endl;\par
00352 \}\par
00353 \par
00358 {\cf18 void} transMatriz()\{\par
00359     {\cf18 int} fila\{\};     \par
00360     {\cf18 int} columna\{\};  \par
00362     cout << {\cf22 "\\nDimensiones de las matrices:"};\par
00363     cout << {\cf22 "\\nFilas de las matrices: "};\par
00364     cin >> fila;\par
00365     cout << {\cf22 "\\nColumnas de las matrices: "};\par
00366     cin >> columna;\par
00367 \par
00368     {\cf18 int} **A = {\cf17 new} {\cf18 int}*[fila];           {\cf20 //doble apuntador para hacer matriz A}\par
00369     {\cf19 for}({\cf18 size_t} i\{0\}; i < fila; i++)\{    {\cf20 //Para cada fila del apuntador se hace}\par
00370         A[i] = {\cf17 new} {\cf18 int}[columna];        {\cf20 //las columnas necesarias}\par
00371     \}\par
00372 \par
00373     {\cf18 int} **B = {\cf17 new} {\cf18 int}*[columna];           {\cf20 //doble apuntador para hacer matriz B}\par
00374     {\cf19 for}({\cf18 size_t} i\{0\}; i < columna; i++)\{\par
00375         B[i] = {\cf17 new} {\cf18 int}[fila];\par
00376     \}\par
00377 \par
00378     {\cf18 unsigned} {\cf18 int} semilla1 = chrono::steady_clock::now().time_since_epoch().count();\par
00379 \par
00380     cout << {\cf22 "\\nDatos de la matriz A: "};\par
00381     {\cf19 if}(fila*columna > 16)\{\par
00382         randomMatriz(A, fila, columna, semilla1);\par
00383     \}{\cf19 else}\{\par
00384         leerMatriz(A, fila, columna);\par
00385     \}\par
00386 \par
00387     {\cf19 for}({\cf18 size_t} i\{0\}; i < columna; i++)\{\par
00388         {\cf19 for}({\cf18 size_t} j\{0\}; j < fila; j++)\{\par
00389             B[i][j] = A[j][i];\par
00390         \}\par
00391     \}\par
00392 \par
00393     cout << {\cf22 "\\nMatriz:\\n"};\par
00394     imprimirMatriz(A, fila, columna);\par
00395     cout << {\cf22 "\\nTranspuesta:\\n"};\par
00396     imprimirMatriz(B, columna, fila);\par
00397     system({\cf22 "PAUSE()"});\par
00398     cout << {\cf22 "\\n"} << endl;\par
00399 \}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \'CDndice\par 
\pard\plain 
{\tc \v \'CDndice}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
